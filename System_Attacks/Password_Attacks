Pseudo-Code of Brute-Force Script:

password_found = false
password_lenght = 1

while password_found == false
do
  while can_create_password_of_lenght(password_lenght)
  do
    password = create_password_of_lenght(password_lenght)
    if (hash(password) match attacked_hash)
    then
      password_found = true
  done
done



John the Ripper
----------------------
https://www.openwall.com/john/
https://howsecureismypassword.net/
https://owasp.org/www-project-seclists/
https://github.com/danielmiessler/SecLists/tree/master/Passwords
/usr/share/seclists/Passwords/
https://ophcrack.sourceforge.io/

Parameters:
> --list=formats      // lists all formats

Cracking Password via /etc/passwd and /etc/shadow:
> unshadow passwd shadow > crackme

pure brute-force attack:
> john -incremental -users:<users list or name of the user> <file to crack>

show cracked passwords:
> john --show crackme

john pot file:        // cracked passwords
> ~/.john/john.pot

dictionary attack:
> john -wordlist=<path to wordlist> <file to crack>

rules to perform john:
> john -wordlist=<path to wordlist> -rules <file to crack>
> /usr/share/john/*.py for formatting
> /usr/share/john/office2john.py

cracking with rainbow tables:
> ophcrack    // for windows passwords



Hashcat
----------------------
https://hashcat.net/hashcat
> GPU usage better than CPU
> hashcat parameters
  > -m      // hash type
    > 0     // md5
  > -a      // attack-mode
    > 0     // dictionary attack
  > -o      // output file
  > -d      // OpenCL device to use
  > -O      // optimize performance
  > -b      // benchmark test
hashcat.potfile for saved passwords
> rule based attack
https://hashcat.net/wiki/doku.php?id=rule_based_attack
  > own rule:
  > one function each line in a txt file 

  > -r rules file
  > default rules in /rules
  > dive 65% success rate
  
mask attack:
https://hashcat.net/wiki/doku.php?id=mask_attack
> -a 3
> eg ?!?!?!?!?!?!a
